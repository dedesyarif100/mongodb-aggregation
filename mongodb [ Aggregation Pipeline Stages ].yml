mongodb: 

db.getCollection("activities").find({
    status: "survey_post"
})

Aggregation Pipeline Stages :
# $addFields
db.activities.aggregate([
    {
        $match: {
            status: "view_post"
        }
    }
])

db.activities.aggregate([
    {
        $match: {
            status: "view_post"
        }
    },
    {
        $addFields: { "cats": 20 }
    }
])

# $bucket
# $bucketAuto
# $changeStream
# $collStats
# $count
db.activities.aggregate([
    {
        $match: { status: "view_post" }
    },
    {
        $group: { 
            _id: null, 
            myCount: { $sum: 1 }
        } 
    },
    {
        $project: { _id: 0 } 
    }
])

db.categories.aggregate([
    {
        $match: {
            id: {$lte: 7}
        }
    },
    {
        $count: "passing_total_id"
    }
])

# $densify
# $documents
# $facet
# $fill
db.dailysales.aggregate([
    {
        $fill: {
            output: {
                "bootsSold": { value: 0 },
                "sandalsSold": { value: 0 },
                "sneakersSold": { value: 0 }
            }
        }
    }
])

db.stock.aggregate([
    {
        $set: {
            "valueExisted": {
                "$ifNull": [
                    { "$toBool": { "$toString": "$price" } },
                    false
                ]
            }
        }
    },
    {
        $fill: {
            sortBy: { no: 1 },
            output: {
                "price": { method: "linear" }
            }
        }
    }
])

# $geoNear
# $graphLookup
# $group
# $indexStats
# $limit
db.getCollection("activities").aggregate([
    {$limit: 8}
])

# $listSessions
# $lookup
db.getCollection("roles").aggregate([
    {
        $match: {id: 13}
    },
    {
        $lookup: {
            from: "accounts",
            localField: "id",
            foreignField: "role_id",
            as: "result"
        }
    },
    {
        $addFields: {
            count: {$size: "$result"},
            totalCount: {$size: "$result"},
        }
    },
    {
        $addFields: {totalScore: {
            $add: ["$count", "$totalCount"]
        }}
    }
])

db.getCollection("roles").aggregate([
    {
        $match: {id: 13}
    },
    {
        $lookup: {
            from: "accounts",
            localField: "id",
            foreignField: "role_id",
            as: "result"
        }
    },
    {
        $addFields: {count: {$size: "$result"}}
    },
    {
        $addFields: {"specs.type": "$count"}
    }
])

db.orders9.aggregate([
  {
    $lookup: {
      from: "inventory12",
      localField: "item",
      foreignField: "sku",
      as: "inventory_docs"
    }
  }
])

db.classes.aggregate([
  {
    $lookup: {
      from: "members",
      localField: "enrollmentlist",
      foreignField: "name",
      as: "enrollee_info"
    }
  }
])

db.orders10.aggregate([
  {
    $lookup: {
      from: "warehouses2",
      let: { 
        order_item: "$item", 
        order_qty: "$ordered"
      },
      pipeline: [
        { $match:
          { $expr:
            { $and:
              [
                { $eq: [ "$stock_item",  "$$order_item" ] },
                { $gte: [ "$instock", "$$order_qty" ] }
              ]
            }
          }
        },
        { $project: { stock_item: 0, _id: 0 } }
      ],
      as: "stockdata"
    }
  }
])

db.absences.aggregate([
  {
    $lookup: {
      from: "holidays",
      pipeline: [
        { $match: { year: 2018 } },
        { $project: { _id: 0, date: { name: "$name", date: "$date" } } },
        { $replaceRoot: { newRoot: "$date" } }
      ],
      as: "holidays"
    }
  }
])

# $match
db.getCollection("polling_setups").aggregate([
    {
        $match : {
            related_article : 1,
            title: "Do you like me now 4 ?",
        }
    }
])

# $merge
# $out
# $planCacheStats
# $project
db.categories.aggregate([
    {
        $project: {
            "name": 0, 
            "slug": 0
        }
    }
])

db.categories.aggregate([
    {
        $project: {
            name: 0, 
            slug: 0
        }
    }
])

db.categories.aggregate([
    {
        $project: {
            "name": 1, 
            "slug": 1
        }
    }
])

db.categories.aggregate([
    {
        $project: {
            name: 1, 
            slug: 1
        }
    }
])

db.global_playlists.aggregate([
    {
        $project: {
            "post_populer.start_date": 0,
            "post_populer.end_date": 0,
        }
    }
])

db.global_playlists.aggregate([
    {
        $project: {
            "post_populer.start_date": 1,
            "post_populer.end_date": 1,
        }
    }
])

db.global_playlists.aggregate([
    {
        $project: {
            "post_populer": {
                "start_date": 1,
                "end_date": 1,
            },
        }
    }
])

db.books.aggregate([
    {
        $project: {
            title: 1,
            "author.first": 1,
            "author.last" : 1,
            "author.middle": {
                $cond: {
                    if: { $eq: ["", "$author.middle" ]},
                    then: "$$REMOVE",
                    else: "$author.middle"
                }
            }
        }
    }
])

# $redact
# $replaceRoot
# $replaceWith
# $sample
db.categories.aggregate([
    { 
        $sample: { size: 5}
    }
])

# $search
# $searchMeta
# $set
# $setWindowFields
# $skip
db.categories.aggregate([
    {$skip: 10}
])

# $sort
db.categories.aggregate([
    {$sort : {id: -1 }}
])

db.categories.aggregate([
    {$match: {parent_id: 0}},
    {$sort : {id: -1 }}
])

# $sortByCount
# $unionWith
db.suppliers1.aggregate([
   { $project: { state: 1, _id: 1 } },
   { $unionWith: { coll: "warehouses1", pipeline: [ { $project: { state: 1, _id: 1 } } ]} }
])

db.suppliers1.aggregate([
   { $project: { state: 1, _id: 1 } },
   { $unionWith: { coll: "warehouses1", pipeline: [ { $project: { state: 1, _id: 1 } } ]} },
   { $group: { _id: "$state" } }
])

db.sales2019q1.aggregate( [
   { $set: { _id: "2019Q1" } },
   { $unionWith: { coll: "sales2019q2", pipeline: [ { $set: { _id: "2019Q2" } } ] } },
   { $unionWith: { coll: "sales2019q3", pipeline: [ { $set: { _id: "2019Q3" } } ] } },
   { $unionWith: { coll: "sales2019q4", pipeline: [ { $set: { _id: "2019Q4" } } ] } },
   { $sort: { _id: 1, store: 1, item: 1 } }
])

db.sales2019q1.aggregate( [
   { $unionWith: "sales2019q2" },
   { $unionWith: "sales2019q3" },
   { $unionWith: "sales2019q4" },
   { $group: { _id: "$item", total: { $sum: "$quantity" } } },
   { $sort: { total: -1 }}
])

db.sales2019q1.aggregate( [
   { $group: { _id: "$item", total: { $sum: "$quantity" } } },
   { $unionWith: { coll: "sales2019q2", pipeline: [ { $group: { _id: "$item", total: { $sum: "$quantity" } } } ] } },
   { $unionWith: { coll: "sales2019q3", pipeline: [ { $group: { _id: "$item", total: { $sum: "$quantity" } } } ] } },
   { $unionWith: { coll: "sales2019q4", pipeline: [ { $group: { _id: "$item", total: { $sum: "$quantity" } } } ] } },
   { $group: { _id: "$_id", total: { $sum: "$total" } } },
   { $sort: { total: -1 }}
])

# $unset
db.categories.aggregate([
    {$unset: "name"}
])

db.categories.aggregate([
    {$unset: ["name", "slug"]}
])

db.global_playlists.aggregate([
    {$unset: ["post_populer.start_date", "post_populer.end_date"]}
])

db.global_playlists.aggregate([
    {$unset: ["post_headline", "post_populer.post_id"]}
])

# $unwind
