mongodb: 

Expression Operators :
- Arithmetic Expression Operators :
# $abs
# $add
# $ceil
# $divide
# $exp
# $floor
# $ln
# $log
# $log10
# $mod
# $multiply
# $pow
# $round
# $sqrt
# $subtract
# $trunc

- Array Expression Operators :
# $arrayElemAt
# $arrayToObject
# $concatArrays
# $filter
# $first
# $firstN
# $in
# $indexOfArray
# $isArray
# $last
# $lastN
# $map
# $maxN
# $minN
# $objectToArray
# $range
# $reduce
# $reverseArray
# $size
# $slice
# $sortArray
# $zip

- Boolean Expression Operators :
# $and
# $not
# $or

- Comparison Expression Operators :
# $cmp
# $eq
# $gt
# $gte
# $lt
# $lte
# $ne

- Conditional Expression Operators :
# $cond
# $ifNull
# $switch

- Custom Aggregation Expression Operators :
# $accumulator
# $function

- Data Size Operators :
# $binarySize
# $bsonSize

- Date Expression Operators :
# $dateAdd
# $dateDiff
# $dateFromParts
# $dateFromString
# $dateSubtract
# $dateToParts
# $dateToString
# $dateTrunc
# $dayOfMonth
# $dayOfWeek
# $dayOfYear
# $hour
# $isoDayOfWeek
# $isoWeek
# $isoWeekYear
# $millisecond
# $minute
# $month
# $second
# $toDate
# $week
# $year
# $add
# $subtract

- Literal Expression Operator :
# $literal

- Miscellaneous Operators :
# $getField
# $rand
# $sampleRate

- Object Expression Operators :
# $mergeObjects
# $objectToArray
# $setField

- Set Expression Operators :
# $allElementsTrue
# $anyElementTrue
# $setDifference
# $setEquals
# $setIntersection
# $setIsSubset
# $setUnion

- String Expression Operators :
# $concat
# $dateFromString
# $dateToString
# $indexOfBytes
# $indexOfCP
# $ltrim
# $regexFind
# $regexFindAll
# $regexMatch
# $replaceOne
# $replaceAll
# $rtrim
# $split
# $strLenBytes
# $strLenCP
# $strcasecmp
# $substr
# $substrBytes
# $substrCP
# $toLower
# $toString
# $trim
# $toUpper

- Text Expression Operator :
# $meta

- Timestamp Expression Operators :
# $tsIncrement
# $tsSecond

- Trigonometry Expression Operators :
# $sin
# $cos
# $tan
# $asin
# $acos
# $atan
# $atan2
# $asinh
# $acosh
# $atanh
# $sinh
# $cosh
# $tanh
# $degreesToRadians
# $radiansToDegrees

- Type Expression Operators :
# $convert
# $isNumber
# $toBool
# $toDate
# $toDecimal
# $toDouble
# $toInt
# $toLong
# $toObjectId
# $toString
# $type

- Accumulators ($group, $bucket, $bucketAuto, $setWindowFields) :
# $accumulator
# $addToSet
# $avg
# $bottom
# $bottomN
# $count
# $first
# $firstN
# $last
# $lastN
# $max
# $maxN
# $mergeObjects
# $min
# $push
# $stdDevPop
# $stdDevSamp
# $sum
# $top
# $topN

- Accumulators (in Other Stages) :
# $avg
# $max
# $min
# $stdDevPop
# $stdDevSamp
# $sum

- Variable Expression Operators :
# $let

- Window Operators :
# $addToSet
# $avg
# $bottom
# $bottomN
# $count
# $covariancePop
# $covarianceSamp
# $denseRank
# $derivative
# $documentNumber
# $expMovingAvg
# $first
# $integral
# $last
# $linearFill
# $locf
# $max
# $min
# $minN
# $push
# $rank
# $shift
# $stdDevPop
# $stdDevSamp
# $sum
# $top
# $topN

- Alphabetical Listing of Expression Operators :
# $abs
db.ratings.aggregate([
	{
		$project: { 
			delta: { 
				$abs: { 
					$subtract: [ "$start", "$end" ] 
				}
			}
		}
	}
])

# $accumulator
# $acos
# $acosh
# $add
db.sales.aggregate([
	{ 
		$project: { 
			item: 1, 
			total: { 
				$add: [ "$price", "$fee" ] 
			}
		}
	}
])

db.sales.aggregate([
	{ 
		$project: { 
			item: 1, 
			billing_date: { 
				$add: [ "$date", 3*24*60*60000 ]
			} 
		}
	}
])

# $addToSet
db.sales.aggregate([
	{
		$group: {
			_id: { 
				day: { $dayOfYear: "$date"}, 
				year: { $year: "$date" } 
			},
			itemsSold: { $addToSet: "$item" }
		}
	}
])

db.cakeSales.aggregate( [
	{
		$setWindowFields: {
			partitionBy: "$state",
			sortBy: { orderDate: 1 },
			output: {
				cakeTypesForState: {
					$addToSet: "$type",
					window: {
						documents: [ "unbounded", "current" ]
					}
				}
			}
		}
	}
])

# $allElementsTrue
db.survey.aggregate([
	{ 
		$project: { 
			_id: 1, 
			responses: 1, 
			isAllTrue: { $allElementsTrue: [ "$responses" ] }
		}
	}
])

# $and
db.inventory.aggregate([
	{
		$project: {
			item: 1,
			qty: 1,
			result: { 
				$and: [ 
					{ $gt: [ "$qty", 100 ] }, 
					{ $lt: [ "$qty", 250 ] },
				]
			}
		}
	}
])

# $anyElementTrue
db.survey.aggregate([
	{ 
		$project: { 
			_id: 1, 
			responses: 1, 
			isAnyTrue: { $anyElementTrue: [ "$responses" ] }
		}
	}
])

# $arrayElemAt
db.users.aggregate([
	{
		$project: {
			name: 1,
			first: { $arrayElemAt: [ "$favorites", 0 ] },
			last: { $arrayElemAt: [ "$favorites", -1 ] }
		}
	}
])

# $arrayToObject
# $asin
# $asinh
# $atan
# $atan2
# $atanh
# $avg
db.sales.aggregate([
	{
		$group: {
			_id: "$item",
			avgAmount: { $avg: { $multiply: [ "$price", "$quantity" ] } },
			avgQuantity: { $avg: "$quantity" }
		}
	}
])

db.students.aggregate([
	{ 
		 $project: { 
			  quizAvg: { $avg: "$quizzes"}, 
			  labAvg: { $avg: "$labs" }, 
			  examAvg: { $avg: [ "$final", "$midterm" ] }
		 } 
	}
])

# $binarySize
# $bottom
db.gamescores.aggregate([
	{
		$match : { gameId : "G1" }
	},
	{
		$group: {
			_id: "$gameId",
			playerId: {
				$bottom: {
					output: [ "$playerId", "$score" ],
					sortBy: { "score": -1 }
				}
			}
		}
	}
])

db.gamescores.aggregate([
	{
		$group: {
			_id: "$gameId",
			playerId: {
				$bottom: {
					output: [ "$playerId", "$score" ],
					sortBy: { "score": -1 }
				}
			}
		}
	}
])

# $bottomN
db.gamescores.aggregate([
	{
		$match : { gameId : "G1" }
	},
	{
		$group: {
			_id: "$gameId",
			playerId: {
				$bottomN: {
					output: ["$playerId", "$score"],
					sortBy: { "score": -1 },
					n:3
				}
			}
		}
	}
])

db.gamescores.aggregate([
	{
		$group: {
			_id: "$gameId",
			playerId: {
				$bottomN: {
					output: ["$playerId", "$score"],
					sortBy: { "score": -1 },
					n:3
				}
			}
		}
	}
])

db.gamescores.aggregate([
	{
		$group: {
			_id: {"gameId": "$gameId"},
			gamescores: {
				$bottomN:
					{
						output: "$score",
						n: { $cond: { if: {$eq: ["$gameId","G2"] }, then: 1, else: 3 } },
						sortBy: { "score": -1 }
					}
				}
		}
	}
])

# $bsonSize
db.employees.aggregate([
	{
		"$project": {
			"name": 1,
			"object_size": { $bsonSize: "$$ROOT" }
		}
	}
])

db.employees.aggregate([
	{
		"$group": {
			"_id": null,
			"combined_object_size": { $sum: { $bsonSize: "$$ROOT" } }
		}
	}
])

# $ceil
db.samples.aggregate([
	{ $project: { value: 1, ceilingValue: { $ceil: "$value" } } }
])

# $cmp
db.inventory.aggregate([
	{
		$project: {
			_id: 1,
			item: 1,
			qty: 1,
			cmpTo250: { $cmp: [ "$qty", 250 ] }
		}
	}
])

# $concat
db.inventory.aggregate([
	{ 
		$project: { 
			itemDescription: { $concat: [ "$item", " - ", "$description" ] } 
		}
	}
])

# $concatArrays
db.warehouses.aggregate([
	{ $project: { items: { $concatArrays: [ "$instock", "$ordered" ] } } }
])

# $cond
db.inventory.aggregate([
	{
		$project: {
			item: 1,
			qty: 1,
			discount: {
				$cond: { 
					if: { $gte: [ "$qty", 250 ] }, 
					then: "lebih besar dari 250",
					else: "lebih kecil dari 250"
				}
			}
		}
	}
])

db.inventory.aggregate([
	{
		$project: {
			item: 1,
			qty: 1,
			discount: {
				$cond: [ 
					{ $gte: [ "$qty", 250 ] }, 
					"lebih besar dari 250",
					"lebih kecil dari 250" 
				]
			}
		}
	}
])

# $convert
// Define stage to add convertedPrice and convertedQty fields with
//    the converted price and qty values.
// If price or qty values are missing, the conversion returns a
//    value of decimal value or int value of 0.
// If price or qty values cannot be converted, the conversion returns
//    a string
priceQtyConversionStage = {
	$addFields: {
		convertedPrice: { $convert:
			{
				input: "$price",
				to: "decimal",
				onError: "Error",
				onNull: NumberDecimal("0")
			} },
		convertedQty: { $convert:
			{
				input: "$qty",
				to: "int",
				onError:{ $concat:
					[
						"Could not convert ",
						{ $toString:"$qty" },
						" to type integer."
					]
				},
			onNull: Int32("0")
		} },
	}
};
totalPriceCalculationStage = {
	$project: { totalPrice: {
	  $switch: {
		  branches: [
			 { case:
				 { $eq: [ { $type: "$convertedPrice" }, "string" ] },
				 then: "NaN"
			 },
			 { case:
				 { $eq: [ { $type: "$convertedQty" }, "string" ] },
				 then: "NaN"
			 },
		  ],
		  default: { $multiply: [ "$convertedPrice", "$convertedQty" ] }
	  }
}}};
db.orders.aggregate( [
	priceQtyConversionStage,
	totalPriceCalculationStage
])

# $cos
# $cosh
# $count
db.cakeSales.aggregate( [
	{
		$group: {
			_id: "$state",
			countNumberOfDocumentsForState: {
				$count: {}
			}
		}
	}
] )

# $covariancePop
# $covarianceSamp
# $dateAdd
# $dateDiff
# $dateFromParts
# $dateSubtract
# $dateTrunc
# $dateToParts
# $dateFromString
# $dateToString
# $dayOfMonth
# $dayOfWeek
# $dayOfYear
# $degreesToRadians
# $denseRank
# $derivative
# $divide
# $documentNumber
# $eq
# $exp
# $expMovingAvg
# $filter
# $first
# $first
# $firstN
# $firstN
# $floor
# $function
# $getField
# $gt
# $gte
# $hour
# $ifNull
# $in
# $indexOfArray
# $indexOfBytes
# $indexOfCP
# $integral
# $isArray
# $isNumber
# $isoDayOfWeek
# $isoWeek
# $isoWeekYear
# $last
# $last
# $lastN
# $lastN
# $let
# $linearFill
# $literal
# $ln
# $locf
# $log
# $log10
# $lt
# $lte
# $ltrim
# $map
# $max
# $maxN
# $maxN
# $mergeObjects
# $meta
# $min
# $minN
# $minN
# $millisecond
# $minute
# $mod
# $month
# $multiply
# $ne
# $not
# $objectToArray
# $or
# $pow
# $push
# $radiansToDegrees
# $rand
# $range
# $rank
# $reduce
# $regexFind
# $regexFindAll
# $regexMatch
# $replaceOne
# $replaceAll
# $reverseArray
# $round
# $rtrim
# $sampleRate
# $second
# $setDifference
# $setEquals
# $setField
# $setIntersection
# $setIsSubset
# $setUnion
# $shift
# $size
# $sin
# $sinh
# $slice
# $sortArray
# $split
# $sqrt
# $stdDevPop
# $stdDevSamp
# $strcasecmp
# $strLenBytes
# $strLenCP
# $substr
# $substrBytes
# $substrCP
# $subtract
# $sum
# $switch
db.grades.aggregate([
	{
		$project: {
			"name" : 1,
			"avg": { $avg: "$scores"},
			"summary" : {
				$switch: {
					branches: [
						{
							case: { 
								$gte : [ { $avg : "$scores" }, 90 ]
							},
							then: "Doing great!"
						},
						{
							case: { 
								$and : [ 
									{ $gte : [ { $avg : "$scores" }, 80 ] },
									{ $lt : [ { $avg : "$scores" }, 90 ] }
								]
							},
							then: "Doing pretty well."
						},
						{
							case: { 
								$lt : [ { $avg : "$scores" }, 80 ]
							},
							then: "Needs improvement."
						}
					],
					default: "No scores found."
				}
			}
		}
	}
])

# $tan
# $tanh
# $toBool
# $toDate
# $toDecimal
# $toDouble
# $toInt
# $toLong
# $toObjectId
# $top
# $topN
# $toString
# $toLower
# $toUpper
# $trim
# $trunc
# $tsIncrement
# $tsSecond
# $type
# $unsetField
# $week
# $year
# $zip
# 
# 
