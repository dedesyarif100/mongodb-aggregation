mongodb: 

Expression Operators :
- Arithmetic Expression Operators :
# $abs
# $add
# $ceil
# $divide
# $exp
# $floor
# $ln
# $log
# $log10
# $mod
# $multiply
# $pow
# $round
# $sqrt
# $subtract
# $trunc

- Array Expression Operators :
# $arrayElemAt
# $arrayToObject
# $concatArrays
# $filter
# $first
# $firstN
# $in
# $indexOfArray
# $isArray
# $last
# $lastN
# $map
# $maxN
# $minN
# $objectToArray
# $range
# $reduce
# $reverseArray
# $size
# $slice
# $sortArray
# $zip

- Boolean Expression Operators :
# $and
# $not
# $or

- Comparison Expression Operators :
# $cmp
# $eq
# $gt
# $gte
# $lt
# $lte
# $ne

- Conditional Expression Operators :
# $cond
# $ifNull
# $switch

- Custom Aggregation Expression Operators :
# $accumulator
# $function

- Data Size Operators :
# $binarySize
# $bsonSize

- Date Expression Operators :
# $dateAdd
# $dateDiff
# $dateFromParts
# $dateFromString
# $dateSubtract
# $dateToParts
# $dateToString
# $dateTrunc
# $dayOfMonth
# $dayOfWeek
# $dayOfYear
# $hour
# $isoDayOfWeek
# $isoWeek
# $isoWeekYear
# $millisecond
# $minute
# $month
# $second
# $toDate
# $week
# $year
# $add
# $subtract

- Literal Expression Operator :
# $literal

- Miscellaneous Operators :
# $getField
# $rand
# $sampleRate

- Object Expression Operators :
# $mergeObjects
# $objectToArray
# $setField

- Set Expression Operators :
# $allElementsTrue
# $anyElementTrue
# $setDifference
# $setEquals
# $setIntersection
# $setIsSubset
# $setUnion

- String Expression Operators :
# $concat
# $dateFromString
# $dateToString
# $indexOfBytes
# $indexOfCP
# $ltrim
# $regexFind
# $regexFindAll
# $regexMatch
# $replaceOne
# $replaceAll
# $rtrim
# $split
# $strLenBytes
# $strLenCP
# $strcasecmp
# $substr
# $substrBytes
# $substrCP
# $toLower
# $toString
# $trim
# $toUpper

- Text Expression Operator :
# $meta

- Timestamp Expression Operators :
# $tsIncrement
# $tsSecond

- Trigonometry Expression Operators :
# $sin
# $cos
# $tan
# $asin
# $acos
# $atan
# $atan2
# $asinh
# $acosh
# $atanh
# $sinh
# $cosh
# $tanh
# $degreesToRadians
# $radiansToDegrees

- Type Expression Operators :
# $convert
# $isNumber
# $toBool
# $toDate
# $toDecimal
# $toDouble
# $toInt
# $toLong
# $toObjectId
# $toString
# $type

- Accumulators ($group, $bucket, $bucketAuto, $setWindowFields) :
# $accumulator
# $addToSet
# $avg
# $bottom
# $bottomN
# $count
# $first
# $firstN
# $last
# $lastN
# $max
# $maxN
# $mergeObjects
# $min
# $push
# $stdDevPop
# $stdDevSamp
# $sum
# $top
# $topN

- Accumulators (in Other Stages) :
# $avg
# $max
# $min
# $stdDevPop
# $stdDevSamp
# $sum

- Variable Expression Operators :
# $let

- Window Operators :
# $addToSet
# $avg
# $bottom
# $bottomN
# $count
# $covariancePop
# $covarianceSamp
# $denseRank
# $derivative
# $documentNumber
# $expMovingAvg
# $first
# $integral
# $last
# $linearFill
# $locf
# $max
# $min
# $minN
# $push
# $rank
# $shift
# $stdDevPop
# $stdDevSamp
# $sum
# $top
# $topN

- Alphabetical Listing of Expression Operators :
# $abs ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.ratings.aggregate([
	{
		$project: { 
			delta: { 
				$abs: { 
					$subtract: [ "$start", "$end" ] 
				}
			}
		}
	}
])

# $accumulator
# $acos
# $acosh
# $add ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.sales.aggregate([
	{ 
		$project: { 
			item: 1, 
			total: { 
				$add: [ "$price", "$fee" ] 
			}
		}
	}
])

db.sales.aggregate([
	{ 
		$project: { 
			item: 1, 
			billing_date: { 
				$add: [ "$date", 3*24*60*60000 ]
			} 
		}
	}
])

# $addToSet ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.sales.aggregate([
	{
		$group: {
			_id: { 
				day: { $dayOfYear: "$date"}, 
				year: { $year: "$date" } 
			},
			itemsSold: { $addToSet: "$item" }
		}
	}
])

db.cakeSales.aggregate( [
	{
		$setWindowFields: {
			partitionBy: "$state",
			sortBy: { orderDate: 1 },
			output: {
				cakeTypesForState: {
					$addToSet: "$type",
					window: {
						documents: [ "unbounded", "current" ]
					}
				}
			}
		}
	}
])

# $allElementsTrue ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.survey.aggregate([
	{ 
		$project: { 
			_id: 1, 
			responses: 1, 
			isAllTrue: { $allElementsTrue: [ "$responses" ] }
		}
	}
])

# $and ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.inventory.aggregate([
	{
		$project: {
			item: 1,
			qty: 1,
			result: { 
				$and: [ 
					{ $gt: [ "$qty", 100 ] }, 
					{ $lt: [ "$qty", 250 ] },
				]
			}
		}
	}
])

# $anyElementTrue ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.survey.aggregate([
	{ 
		$project: { 
			_id: 1, 
			responses: 1, 
			isAnyTrue: { $anyElementTrue: [ "$responses" ] }
		}
	}
])

# $arrayElemAt ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.users.aggregate([
	{
		$project: {
			name: 1,
			first: { $arrayElemAt: [ "$favorites", 0 ] },
			last: { $arrayElemAt: [ "$favorites", -1 ] }
		}
	}
])

# $arrayToObject
# $asin
# $asinh
# $atan
# $atan2
# $atanh
# $avg ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.sales.aggregate([
	{
		$group: {
			_id: "$item",
			avgAmount: { $avg: { $multiply: [ "$price", "$quantity" ] } },
			avgQuantity: { $avg: "$quantity" }
		}
	}
])

db.students.aggregate([
	{ 
		$project: { 
			quizAvg: { $avg: "$quizzes"}, 
			labAvg: { $avg: "$labs" }, 
			examAvg: { $avg: [ "$final", "$midterm" ] }
		} 
	}
])

# $binarySize
# $bottom ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.gamescores.aggregate([
	{
		$match : { gameId : "G1" }
	},
	{
		$group: {
			_id: "$gameId",
			playerId: {
				$bottom: {
					output: [ "$playerId", "$score" ],
					sortBy: { "score": -1 }
				}
			}
		}
	}
])

db.gamescores.aggregate([
	{
		$group: {
			_id: "$gameId",
			playerId: {
				$bottom: {
					output: [ "$playerId", "$score" ],
					sortBy: { "score": -1 }
				}
			}
		}
	}
])

# $bottomN ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.gamescores.aggregate([
	{
		$match : { gameId : "G1" }
	},
	{
		$group: {
			_id: "$gameId",
			playerId: {
				$bottomN: {
					output: ["$playerId", "$score"],
					sortBy: { "score": -1 },
					n:3
				}
			}
		}
	}
])

db.gamescores.aggregate([
	{
		$group: {
			_id: "$gameId",
			playerId: {
				$bottomN: {
					output: ["$playerId", "$score"],
					sortBy: { "score": -1 },
					n:3
				}
			}
		}
	}
])

db.gamescores.aggregate([
	{
		$group: {
			_id: {"gameId": "$gameId"},
			gamescores: {
				$bottomN:
					{
						output: "$score",
						n: { $cond: { if: {$eq: ["$gameId","G2"] }, then: 1, else: 3 } },
						sortBy: { "score": -1 }
					}
				}
		}
	}
])

# $bsonSize ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.employees.aggregate([
	{
		"$project": {
			"name": 1,
			"object_size": { $bsonSize: "$$ROOT" }
		}
	}
])

db.employees.aggregate([
	{
		"$group": {
			"_id": null,
			"combined_object_size": { $sum: { $bsonSize: "$$ROOT" } }
		}
	}
])

# $ceil ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.samples.aggregate([
	{ $project: { value: 1, ceilingValue: { $ceil: "$value" } } }
])

# $cmp ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.inventory.aggregate([
	{
		$project: {
			_id: 1,
			item: 1,
			qty: 1,
			cmpTo250: { $cmp: [ "$qty", 250 ] }
		}
	}
])

# $concat ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.inventory.aggregate([
	{ 
		$project: { 
			itemDescription: { $concat: [ "$item", " - ", "$description" ] } 
		}
	}
])

# $concatArrays ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.warehouses.aggregate([
	{ $project: { items: { $concatArrays: [ "$instock", "$ordered" ] } } }
])

# $cond ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.inventory.aggregate([
	{
		$project: {
			item: 1,
			qty: 1,
			discount: {
				$cond: { 
					if: { $gte: [ "$qty", 250 ] }, 
					then: "lebih besar dari 250",
					else: "lebih kecil dari 250"
				}
			}
		}
	}
])

db.inventory.aggregate([
	{
		$project: {
			item: 1,
			qty: 1,
			discount: {
				$cond: [ 
					{ $gte: [ "$qty", 250 ] }, 
					"lebih besar dari 250",
					"lebih kecil dari 250" 
				]
			}
		}
	}
])

# $convert ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
// Define stage to add convertedPrice and convertedQty fields with
//    the converted price and qty values.
// If price or qty values are missing, the conversion returns a
//    value of decimal value or int value of 0.
// If price or qty values cannot be converted, the conversion returns
//    a string
priceQtyConversionStage = {
	$addFields: {
		convertedPrice: { $convert:
			{
				input: "$price",
				to: "decimal",
				onError: "Error",
				onNull: NumberDecimal("0")
			}},
		convertedQty: { $convert:
			{
				input: "$qty",
				to: "int",
				onError:{ $concat:
					[
						"Could not convert ",
						{ $toString:"$qty" },
						" to type integer."
					]
				},
			onNull: Int32("0")
		}},
	}
};
totalPriceCalculationStage = {
	$project: { totalPrice: {
		$switch: {
			branches: [
				{ case:
					{ $eq: [ { $type: "$convertedPrice" }, "string" ] },
					then: "NaN"
				},
				{ case:
					{ $eq: [ { $type: "$convertedQty" }, "string" ] },
					then: "NaN"
				},
			],
			default: { $multiply: [ "$convertedPrice", "$convertedQty" ] }
		}
}}};
db.orders.aggregate([
	priceQtyConversionStage,
	totalPriceCalculationStage
])

# $cos
# $cosh
# $count ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.cakeSales.aggregate([
	{
		$group: {
			_id: "$state",
			countNumberOfDocumentsForState: {
				$count: {}
			}
		}
	}
])

db.cakeSales.aggregate([
	{
		$setWindowFields: {
			partitionBy: "$state",
			sortBy: { orderDate: 1 },
			output: {
				countNumberOfDocumentsForState: {
					$count: {},
					window: {
						documents: [ "unbounded", "current" ]
					}
				}
			}
		}
	}
])

# $covariancePop
# $covarianceSamp
# $dateAdd ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.sales.aggregate([
	{
		$project: {
			"item": 1,
			"nycHour": {
				$hour: { 
					date: "$date", 
					timezone: "-05:00" 
				}
			},
			"nycMinute": {
				$minute: { 
					date: "$date", 
					timezone: "-05:00" 
				}
			},
			"gmtHour": {
				$hour: { 
					date: "$date", 
					timezone: "GMT" 
				}
			},
			"gmtMinute": {
				$minute: { 
					date: "$date", 
					timezone: "GMT" 
				}
			},
			"nycOlsonHour": {
				$hour: { 
					date: "$date", 
					timezone: "America/New_York" 
				}
			},
			"nycOlsonMinute": {
				$minute: { 
					date: "$date", 
					timezone: "America/New_York" 
				}
			}
		}
	}
])

db.shipping.aggregate([
	{
		$project: {
			expectedDeliveryDate: {
				$dateAdd: {
					startDate: "$purchaseDate",
					unit: "day",
					amount: 3
				}
			}
		}
	},
	{ $merge: "shipping"}
])

db.shipping.aggregate([
	{
		$match: {
			$expr: {
				$gt: [ 
					"$deliveryDate",
					{
						$dateAdd: {
							startDate: "$purchaseDate",
							unit: "day",
							amount: 5
						}
					}
				]
			}
		}
	},
	{
		$project: {
			_id: 0,
			custId: 1,
			purchased: {
				$dateToString: {
					format: "%Y-%m-%d",
					date: "$purchaseDate"
				}
			},
			delivery: {
				$dateToString: {
					format: "%Y-%m-%d",
					date: "$deliveryDate"
				}
			}
		}
	}
])

db.billing.aggregate([
	{
		$project: {
			_id: 0,
			location: 1,
			start: {
				$dateToString: {
					format: "%Y-%m-%d %H:%M",
					date: "$login"
				}
			},
			days: {
				$dateToString: {
					format: "%Y-%m-%d %H:%M",
					date: {
						$dateAdd: {
							startDate: "$login",
							unit: "day",
							amount: 1,
							timezone: "$location"
						}
					}
				}
			},
			hours: {
				$dateToString: {
					format: "%Y-%m-%d %H:%M",
					date: {
						$dateAdd: {
							startDate: "$login",
							unit: "hour",
							amount: 24,
							timezone: "$location"
						}
					}
				}
			},
			startTZInfo: {
				$dateToString: {
					format: "%Y-%m-%d %H:%M",
					date: "$login",
					timezone: "$location"
				}
			},
			daysTZInfo: {
				$dateToString: {
					format: "%Y-%m-%d %H:%M",
					date: {
						$dateAdd: {
							startDate: "$login",
							unit: "day",
							amount: 1,
							timezone: "$location"
						}
					},
					timezone: "$location"
				}
			},
			hoursTZInfo: {
				$dateToString: {
					format: "%Y-%m-%d %H:%M",
					date: {
						$dateAdd: {
							startDate: "$login",
							unit: "hour",
							amount: 24,
							timezone: "$location"
						}
					},
					timezone: "$location"
				}
			},
		}
	}
]).pretty()

// Example Update Date
db.shipping.updateOne(
	{ custId: 456 },
	{ $set: { deliveryDate: ISODate( "2021-01-10" ) } }
)
db.shipping.updateOne(
	{ custId: 457 },
	{ $set: { deliveryDate:  ISODate( "2021-03-01" ) } }
)
db.shipping.updateOne(
	{ custId: 458 },
	{ $set: { deliveryDate:  ISODate( "2021-03-02" ) } }
)

# $dateDiff ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.shipping.aggregate([
	{
		$group: {
			_id: null,
			averageTime: {
				$avg: {
					$dateDiff: {
						startDate: "$purchaseDate",
						endDate: "$deliveryDate",
						unit: "day"
					}
				}
			}
		}
	},
	{
		$project: {
			_id: 0,
			numDays: {
				$trunc: [ "$averageTime", 1 ]
			}
		}
	}
])

db.subscriptions.aggregate([
	{
		$project: {
			Start: "$start",
			End: "$end",
			years: {
				$dateDiff: {
					startDate: "$start",
					endDate: "$end",
					unit: "year"
				}
			},
			months: {
				$dateDiff: {
					startDate: "$start",
					endDate: "$end",
					unit: "month"
				}
			},
			days: {
				$dateDiff: {
					startDate: "$start",
					endDate: "$end",
					unit: "day"
				}
			},
			_id: 1
		}
	}
])

db.months.aggregate([
	{
		$project: {
			Start: "$start",
			End: "$end",
			wks_default: {
				$dateDiff: {
					startDate: "$start",
					endDate: "$end",
					unit: "week"
				}
			},
			wks_monday: {
				$dateDiff: {
					startDate: "$start",
					endDate: "$end",
					unit: "week",
					startOfWeek: "Monday"
				}
			},
			wks_friday: {
				$dateDiff: {
					startDate: "$start",
					endDate: "$end",
					unit: "week",
					startOfWeek: "fri"
				}
			},
			_id: 1
		}
	}
])

# $dateFromParts ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.sales.aggregate([
	{
		$project: {
			item: 1,
			date: {
				$dateFromParts: {
					'year' : 2017, 'month' : 2, 'day': 8, 'hour' : 12
				}
			},
			date_iso: {
				$dateFromParts: {
					'isoWeekYear' : 2017, 'isoWeek' : 6, 'isoDayOfWeek' : 3, 'hour' : 12
				}
			},
			date_timezone: {
				$dateFromParts: {
					'year' : 2016, 'month' : 12, 'day' : 31, 'hour' : 23,
					'minute' : 46, 'second' : 12, 'timezone' : 'America/New_York'
				}
			}
		}
	}
])

# $dateFromString ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.logmessages.aggregate([ 
	{
		$project: {
			date: {
				$dateFromString: {
					dateString: '$date',
					timezone: 'America/New_York'
				}
			}
		}
	}
])

db.logmessages.aggregate([ 
	{
		$project: {
			date: {
				$dateFromString: {
					dateString: '$date',
					timezone: '$timezone'
				}
			}
		}
	}
])

db.logmessages.aggregate([ 
	{
		$project: {
			date: {
				$dateFromString: {
					dateString: '$date',
					timezone: '$timezone',
					onError: '$date'
				}
			}
		}
	}
])

# $dateSubtract ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.connectionTime.aggregate([
	{
		$match: {
			$expr: {
				$eq: [
					{ $year: "$logout" },
					2021
				]
			},
			$expr: {
				$eq: [
					{ $month: "$logout" },
					1
				]
			}
		}
	},
	{
		$project: {
			logoutTime: {
				$dateSubtract: {
					startDate: "$logout",
					unit: "hour",
					amount: 3
				}
			}
		}
	},
	{
		$merge: "connectionTime"
	}
])

db.connectionTime.aggregate([
	{
		$match: {
			$expr: {
				$lt: [
					"$logoutTime",
					{
						$dateSubtract: {
							startDate: "$$NOW",
							unit: "week",
							amount: 1
						}
					}
				]
			}
		}
	},
	{
		$project: {
			_id: 1,
			custId: 1,
			loggedOut: {
				$dateToString: {
					format: "%Y-%m-%d",
					date: "$logoutTime"
				}
			}
		}
	}
])

db.billing.aggregate([
	{
		$project: {
			_id: 0,
			location: 1,
			start: {
				$dateToString: {
					format: "%Y-%m-%d %H:%M",
					date: "$login"
				}
			},
			days: {
				$dateToString: {
					format: "%Y-%m-%d %H:%M",
					date: {
						$dateSubtract: {
							startDate: "$login",
							unit: "day",
							amount: 1,
							timezone: "$location"
						}
					}
				}
			},
			hours: {
				$dateToString: {
					format: "%Y-%m-%d %H:%M",
					date: {
						$dateSubtract: {
							startDate: "$login",
							unit: "hour",
							amount: 24,
							timezone: "$location"
						}
					}
				}
			},
			startTZInfo: {
				$dateToString: {
					format: "%Y-%m-%d %H:%M",
					date: "$login",
					timezone: "$location"
				}
			},
			daysTZInfo: {
				$dateToString: {
					format: "%Y-%m-%d %H:%M",
					date: {
						$dateSubtract: {
							startDate: "$login",
							unit: "day",
							amount: 1,
							timezone: "$location"
						}
					},
					timezone: "$location"
				}
			},
			hoursTZInfo: {
				$dateToString: {
					format: "%Y-%m-%d %H:%M",
					date: {
						$dateSubtract: {
							startDate: "$login",
							unit: "hour",
							amount: 24,
							timezone: "$location"
						}
					},
					timezone: "$location"
				}
			},
		}
	}
]).pretty()

# $dateToParts ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.sales.aggregate([
	{
		$project: {
			date: {
				$dateToParts: { date: "$date" }
			},
			date_iso: {
				$dateToParts: { date: "$date", iso8601: true }
			},
			date_timezone: {
				$dateToParts: { date: "$date", timezone: "America/New_York" }
			}
		}
	}
])

# $dateToString ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.sales.aggregate([
	{
		$project: {
			yearMonthDayUTC: { $dateToString: { format: "%Y-%m-%d", date: "$date" } },
			timewithOffsetNY: { $dateToString: { format: "%H:%M:%S:%L%z", date: "$date", timezone: "America/New_York"} },
			timewithOffset430: { $dateToString: { format: "%H:%M:%S:%L%z", date: "$date", timezone: "+04:30" } },
			minutesOffsetNY: { $dateToString: { format: "%Z", date: "$date", timezone: "America/New_York" } },
			minutesOffset430: { $dateToString: { format: "%m", date: "$date", timezone: "+04:30" } }
		}
	}
])

# $dateTrunc ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.cakeSales.aggregate([
	{
		$project: {
			_id: 1,
			orderDate: 1,
			truncatedOrderDate: {
				$dateTrunc: {
					date: "$orderDate", 
					unit: "week", 
					binSize: 2,
					timezone: "America/Los_Angeles", 
					startOfWeek: "Monday"
				}
			}
		}
	}
])

db.cakeSales.aggregate([
	{
		$group: {
			_id: {
				truncatedOrderDate: {
					$dateTrunc: {
						date: "$orderDate", 
						unit: "month", 
						binSize: 6
					}
				}
			},
			sumQuantity: { $sum: "$quantity" }
		}
	}
])

# $dayOfMonth ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.sales.aggregate([
	{
		$project: {
			date: 1,
			year: { $year: "$date" },
			month: { $month: "$date" },
			day: { $dayOfMonth: "$date" },
			hour: { $hour: "$date" },
			minutes: { $minute: "$date" },
			seconds: { $second: "$date" },
			milliseconds: { $millisecond: "$date" },
			dayOfYear: { $dayOfYear: "$date" },
			dayOfWeek: { $dayOfWeek: "$date" },
			week: { $week: "$date" }
		}
	}
])

# $dayOfWeek ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.sales.aggregate([
	{
		$project: {
			date: 1,
			year: { $year: "$date" },
			month: { $month: "$date" },
			day: { $dayOfMonth: "$date" },
			hour: { $hour: "$date" },
			minutes: { $minute: "$date" },
			seconds: { $second: "$date" },
			milliseconds: { $millisecond: "$date" },
			dayOfYear: { $dayOfYear: "$date" },
			dayOfWeek: { $dayOfWeek: "$date" },
			week: { $week: "$date" }
		}
	}
])

# $dayOfYear ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.sales.aggregate([
	{
		$project: {
			date: 1,
			year: { $year: "$date" },
			month: { $month: "$date" },
			day: { $dayOfMonth: "$date" },
			hour: { $hour: "$date" },
			minutes: { $minute: "$date" },
			seconds: { $second: "$date" },
			milliseconds: { $millisecond: "$date" },
			dayOfYear: { $dayOfYear: "$date" },
			dayOfWeek: { $dayOfWeek: "$date" },
			week: { $week: "$date" }
		}
	}
])

# $degreesToRadians
# $denseRank ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.cakeSales.aggregate([
	{
		$setWindowFields: {
			partitionBy: "$state",
			sortBy: { quantity: -1 },
			output: {
				denseRankQuantityForState: {
					$denseRank: {}
				}
			}
		}
	}
])

db.cakeSales.aggregate([
	{
		$setWindowFields: {
			partitionBy: "$state",
			sortBy: { orderDate: 1 },
			output: {
				denseRankQuantityForState: {
					$denseRank: {}
				}
			}
		}
	}
])

# $derivative ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.deliveryFleet.aggregate([
	{
		$setWindowFields: {
			partitionBy: "$truckID",
			sortBy: { timeStamp: 1 },
			output: {
				truckAverageSpeed: {
					$derivative: {
						input: "$miles",
						unit: "hour"
					},
					window: {
						range: [ -30, 0 ],
						unit: "second"
					}
				}
			}
		}
	},
	{
		$match: {
			truckAverageSpeed: {
				$gt: 50
			}
		}
	}
])

# $divide ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.planning.aggregate([
	{
		$project: { 
			name: 1, 
			workdays: { 
				$divide: [ "$hours", 8 ]
			}
		}
	}
])

# $documentNumber ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.cakeSales.aggregate([
	{
		$setWindowFields: {
			partitionBy: "$state",
			sortBy: { quantity: -1 },
			output: {
				documentNumberForState: {
					$documentNumber: {}
				}
			}
		}
	}
])

db.cakeSalesWithDuplicates.aggregate([
	{
		$setWindowFields: {
			partitionBy: "$state",
			sortBy: { quantity: -1 },
			output: {
				documentNumberForState: {
					$documentNumber: {}
				}
			}
		}
	}
])

# $eq ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.inventory.aggregate([
	{
		$project: {
			_id: 1,
			item: 1,
			qty: 1,
			qtyEq250: { 
				$eq: [ "$qty", 250 ] 
			}
		}
	}
])

# $exp ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.accounts.aggregate([
	{
		$project: {
			effectiveRate: {
				$subtract: [
					{ $exp: "$rate"}, 1
				]
			}
		}
	}
])

# $expMovingAvg ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.stockPrices.aggregate([
	{
		$setWindowFields: {
			partitionBy: "$stock",
			sortBy: { date: 1 },
			output: {
				expMovingAvgForStock: {
					$expMovingAvg: { input: "$price", N: 2 }
				}
			}
		}
	}
])

db.stockPrices.aggregate([
	{
		$setWindowFields: {
			partitionBy: "$stock",
			sortBy: { date: 1 },
			output: {
				expMovingAvgForStock: {
					$expMovingAvg: { input: "$price", alpha: 0.75 }
				}
			}
		}
	}
])

# $filter ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.salesFilter.aggregate([
	{
		$project: {
			items: {
				$filter: {
					input: "$items",
					as: "item",
					cond: { 
						$gte: [ "$$item.price", 100 ]
					}
				}
			}
		}
	}
])

db.salesFilter.aggregate([
	{
		$project: {
			items: {
				$filter: {
					input: "$items",
					cond: { 
						$lte: [ "$$item.price", 150 ]
					},
					as: "item",
					limit: 200
				}
			}
		}
	}
])

db.salesFilter.aggregate([
	{
		$project: {
			items: {
				$filter: {
					input: "$items",
					cond: { 
						$gte: [ "$$item.price", 100]
					},
					as: "item",
					limit: 5
				}
			}
		}
	}
])

# $first ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.sales.aggregate([
	{ 
		$sort: { 
			item: 1, 
			date: 1 
		}
	},
	{
		$group: {
			_id: "$item",
			firstSale: { $first: "$date" }
		}
	}
])

db.badData.aggregate([
	{ 
		$sort: { 
			item: 1, 
			price: 1
		}
	},
	{
		$group: {
			_id: "$item",
			inStock: { $first: "$quantity" }
		}
	}
])

db.cakeSales.aggregate([
	{
		$setWindowFields: {
			partitionBy: "$state",
			sortBy: { orderDate: 1 },
			output: {
				firstOrderTypeForState: {
					$first: "$type",
					window: {
						documents: [ "unbounded", "current" ]
					}
				}
			}
		}
	}
])

# $firstN ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.aggregate([
	{
		$documents: [
			{ playerId: "PlayerA", gameId: "G1", score: 1 },
			{ playerId: "PlayerB", gameId: "G1", score: 2 },
			{ playerId: "PlayerC", gameId: "G1", score: 3 },
			{ playerId: "PlayerD", gameId: "G1"},
			{ playerId: "PlayerE", gameId: "G1", score: null }
		]
	},
	{
		$group: {
			_id: "$gameId",
			firstFiveScores: {
				$firstN: {
					input: "$score",
					n: 5
				}
			}
		}
	}
])

db.gamescores.aggregate([
	{
		$match : { gameId : "G1" }
	},
	{
		$group: {
			_id: "$gameId",
			firstThreeScores: {
				$firstN: {
					input: ["$playerId", "$score"],
					n: 3
				}
			}
		}
	}
])

db.gamescores.aggregate([
	{
		$group: {
			_id: "$gameId", 
			playerId: {
				$firstN: {
					input: [ "$playerId","$score" ],
					n: 3
				}
			}
		}
	}
])

db.gamescores.aggregate([
	{ 
		$sort : { 
			score : -1
		}
	},
	{
		$group: { 
			_id: "$gameId", 
			playerId: {
				$firstN: {
					input: [ "$playerId","$score" ],
					n: 3
				}
			}
		}
	}
])

db.gamescores.aggregate([
	{
		$group: {
			_id: {"gameId": "$gameId"},
			gamescores: {
				$firstN: {
					input: "$score",
					n: { 
						$cond: { 
							if: { 
								$eq: ["$gameId","G2"]
							},
							then: 1, 
							else: 3
						}
					}
				}
			}
		}
	}
])

db.aggregate([
	{
		$documents: [
			{ 
				array: [10, 20, 30, 40] 
			}
		]
	},
	{ 
		$project: {
			firstThreeElements:{
				$firstN: {
					input: "$array",
					n: 3
				}
			}
		}
	}
])

# $first ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.example1.aggregate([
	{ 
		$addFields: { 
			firstElem: { $first: "$x" }
		} 
	}
])

db.example2.aggregate({ 
	$addFields: { 
		firstElem: { 
			$first: "$x" 
		}
	}
})

db.runninglog.aggregate([
	 	{ 
		$addFields: { 
			firstrun: { $first: "$log" }, 
			lastrun: { $last: "$log" }
		}
	}
])

db.runninglog.aggregate([
	{
		$addFields: { 
			firstrun: { $first: "$log" },
			lastrun: { $last: "$log" }
		}
	},
	{
		$project: {
			team: 1, 
			progress: {
				$cond: {
					if: { 
						$gt: [ 
							{ $size: "$log" },
							3
						] 
					},
					then: { 
						$subtract: [ "$lastrun.distance", "$firstrun.distance"]
					},
					else: "Not enough data."
				}
			}
		}
	}
])

# $firstN ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.games.aggregate([
	{ 
		$addFields: { 
			firstScores: { 
				$firstN: { 
					n: 3, 
					input: "$score"
				}
			}
		}
	}
])

# $floor ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.samples.aggregate([
	{ 
		$project: { 
			value: 1, 
			floorValue: { 
				$floor: "$value" 
			}
		}
	}
])

# $function ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.players.aggregate([
	{ 
		$addFields: {
			isFound: { 
				$function: {
					body: function(name) {
						return hex_md5(name) == "15b0a220baa16331e8d80e15367677ad"
					},
					args: [ "$name" ],
					lang: "js"
				}
			},
			message: { 
				$function: {
					body: function(name, scores) {
						let total = Array.sum(scores);
						return `Hello ${name}.  Your total score is ${total}.`
					},
					args: [ "$name", "$scores"],
					lang: "js"
				}
			}
		}
	}
])

db.players.find({ 
	$where: function() {
	 		return (hex_md5(this.name) == "15b0a220baa16331e8d80e15367677ad")
	}
});

db.players.find({
	$expr: { 
		$function: {
			body: function(name) { 
				return hex_md5(name) == "15b0a220baa16331e8d80e15367677ad";
			},
			args: [ "$name" ],
			lang: "js"
		}
	}
})

# $getField ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.inventory.aggregate([
	{
		$match: { 
			$expr: { 
				$gt: [
					{ $getField: "price" },
					200
				]
			}
		}
	}
])

db.inventory.aggregate([
	{
		$match: { 
			$expr: { 
				$gt: [
					{ 
						$getField: {
							$literal: "price"
						}
					},
					200
				]
			}
		}
	}
])

db.inventory1.aggregate([
	{ 
		$match: { 
			$expr: { 
				$lte: [
					{ 
						$getField: { 
							field: { $literal: "$small" },
							input: "$quantity"
						}
					},
					20
				]
			}
		}
	}
])

# $gt ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.inventory.aggregate([
	{
			 	$project: {
						_id: 1,
						item: 1,
						qty: 1,
						qtyGt250: { 
				$gt: [ "$qty", 250 ]
			},
		}
	}
])

# $gte ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.inventory.aggregate([
	{
			 	$project: {
						_id: 1,
						item: 1,
						qty: 1,
						qtyGt250: { 
				$gte: [ "$qty", 250 ]
			},
		}
	}
])

# $hour ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.sales.aggregate([
	{
		$project: {
			year: { $year: "$date" },
			month: { $month: "$date" },
			day: { $dayOfMonth: "$date" },
			hour: { $hour: "$date" },
			minutes: { $minute: "$date" },
			seconds: { $second: "$date" },
			milliseconds: { $millisecond: "$date" },
			dayOfYear: { $dayOfYear: "$date" },
			dayOfWeek: { $dayOfWeek: "$date" }
		}
	}
])

# $ifNull ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.inventory.aggregate([
	{
		$project: {
			item: 1,
			description: { 
				$ifNull: [ "$description", "Unspecified" ]
			}
		}
	}
])

db.inventory.aggregate([
	{
		$project: {
			item: 1,
			value: { 
				$ifNull: [ "$description", "$qty", "Unspecified" ]
			}
		}
	}
])

# $in ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.fruits.aggregate([
	{
		$project: {
			"store location" : "$location",
			"has bananas" : {
				$in: [ "bananas", "$in_stock" ]
			}
		}
	}
])

# $indexOfArray ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
# $indexOfBytes ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
# $indexOfCP ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
# $integral ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
# $isArray ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.warehouses.aggregate([
	{
		$project: { 
			items: { 
				$cond: {
					if: { 
						$and: [ 
							{ $isArray: "$instock" },
							{ $isArray: "$ordered" }
						]
					},
					then: { 
						$concatArrays: [ "$instock", "$ordered" ]
					},
					else: "One or more fields is not an array."
				}
			}
		}
	}
])

# $isNumber ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.sensors.aggregate([
	{
		$addFields : {
			"isNumber" : {$isNumber : "$reading"},
			"hasType" : {$type : "$reading"}
		}
	}
])

db.grades1.aggregate([
	{
		$addFields: {
			"points" : {
				$cond : {
					if : { $isNumber : "$grade" },
					then: "$grade",
					else: {
						$switch : {
							branches: [
								{ case: {$eq : ["$grade" , "A"]}, then : 4.0 },
								{ case: {$eq : ["$grade" , "B"]}, then : 3.0 },
								{ case: {$eq : ["$grade" , "C"]}, then : 2.0 },
								{ case: {$eq : ["$grade" , "D"]}, then : 1.0 },
								{ case: {$eq : ["$grade" , "F"]}, then : 0.0 }
							]
						}
					}
				}
			}
		}
	},
	{
		$group : {
			_id : "$student_id",
			GPA : {
				$avg : "$points"
			}
		}
	}
])

# $isoDayOfWeek ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.dates1.aggregate([
	{
		$project: {
			_id: 1,
			name: "$name",
			dayOfWeek: { 
				$isoDayOfWeek: "$birthday"
			}
		}
	}
])

# $isoWeek ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.deliveries.aggregate([
	{
		$project: {
			_id: 1,
			city: "$city",
			weekNumber: { 
				$isoWeek: "$date"
			}
		}
	}
])

# $isoWeekYear ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.anniversaries.aggregate([
	{
		$project: {
			yearNumber: { 
				$isoWeekYear: "$date"
			}
		}
	}
])

# $last ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.sales1.aggregate([
	{ 
		$sort: { item: 1, date: 1 }
	},
	{
		$group: {
			_id: "$item",
			lastSalesDate: { $last: "$date" }
		}
	}
])

db.cakeSales.aggregate([
	{
		$setWindowFields: {
			partitionBy: "$state",
			sortBy: { orderDate: 1 },
			output: {
				lastOrderTypeForState: {
					$last: "$type",
					window: {
						documents: [ "current", "unbounded" ]
					}
				}
			}
		}
	}
])

# $last ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
# $lastN ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.aggregate([
	{
		$documents: [
			{ playerId: "PlayerA", gameId: "G1", score: 1 },
			{ playerId: "PlayerB", gameId: "G1", score: 2 },
			{ playerId: "PlayerC", gameId: "G1", score: 3 },
			{ playerId: "PlayerD", gameId: "G1"},
			{ playerId: "PlayerE", gameId: "G1", score: null }
		]
	},
	{
		$group: {
			_id: "$gameId",
			lastFiveScores: {
				$lastN: {
					input: "$score",
					n: 3
				}
			}
		}
	}
])

db.gamescores.aggregate([
	{
		$match : { gameId : "G1" }
	},
	{
		$group: {
			_id: "$gameId",
			lastThreeScores: {
				$lastN: {
					input: ["$playerId", "$score"],
					n: 3
				}
			}
		}
	}
])

db.gamescores.aggregate([
	{ 
		$sort: { score : -1 }
	},
	{
		$group: {
			_id: "$gameId",
			lastThreeScores: {
				$lastN: {
					input: ["$playerId", "$score"],
					n: 3
				}
			}
		}
	}
])

db.gamescores.aggregate([
	{
		$group: {
			_id: {"gameId": "$gameId"},
			gamescores: {
				$lastN: {
					input: "$score",
					n: { 
						$cond: { 
							if: { $eq: ["$gameId","G2"] },
							then: 1,
							else: 3
						}
					}
				}
			}
		}
	}
])

db.aggregate([
	{
		$documents: [{ 
			array: [10, 20, 30, 40] 
		}]
	},
	{ 
		$project: {
			lastThreeElements: {
				$lastN: {
					input: "$array",
					n: 2
				}
			}
		}
	}
])

# $last ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
# $lastN ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
# $let ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.sales.aggregate([
	{
		$project: {
			finalTotal: {
				$let: {
					vars: {
						total: { 
							$add: [ '$price', '$tax' ]
						},
						discounted: { 
							$cond: { 
								if: '$applyDiscount', 
								then: 0.9, 
								else: 1
							}
						}
					},
					in: { 
						$multiply: [ "$$total", "$$discounted" ]
					}
				}
			}
		}
	}
])

# $linearFill ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.stock.aggregate([
	{
		$setWindowFields: {
			sortBy: { time: 1 },
			output: {
				price: { $linearFill: "$price" }
			}
		}
	}
])

db.stock.aggregate([
	{
		$setWindowFields: {
			sortBy: { time: 1 },
			output: {
				linearFillPrice: { $linearFill: "$price" },
				locfPrice: { $locf: "$price" }
			}
		}
	}
])

# $literal ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.records.aggregate([
	{ 
		$project: { 
			costsOneDollar: { 
				$eq: [ 
					"$price", 
					{ $literal: "$1" } 
				]
			}
		}
	}
])

db.bids.aggregate([
	{ 
		$project: { 
			item: 1, 
			startAt: { 
				$literal: 1
			}
		}
	}
])

# $ln ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.sales2.aggregate([ 
	{ 
		$project: { 
			x: "$year", 
			y: { $ln: "$sales" }
		}
	}
])

# $locf ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.stock.aggregate( [
	{
		$setWindowFields: {
			sortBy: { time: 1 },
			output: {
				price: { $locf: "$price" }
			}
		}
	}
])

db.stock.aggregate([
	{
		$setWindowFields: {
			sortBy: { time: 1 },
			output: {
				linearFillPrice: { $linearFill: "$price" },
				locfPrice: { $locf: "$price" }
			}
		}
	}
])

# $log ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
# $log10 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
# $lt ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
# $lte ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
# $ltrim ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
# $map ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.grades2.aggregate([
	{
		$project: {
			adjustedGrades: {
				$map: {
					input: "$quizzes",
					as: "grade",
					in: { 
						$add: [ "$$grade", 5 ]
					}
				}
			}
		}
	}
])

db.deliveries1.aggregate([
	{
		$project: {
			city: "$city",
			integerValues: {
				$map: {
					input: "$distances",
					as: "decimalValue",
					in: { $trunc: "$$decimalValue" }
				}
			}
		}
	}
])

db.temperatures.aggregate([
	{
		$addFields: {
			"tempsF": {
				$map: {
					input: "$tempsC",
					as: "tempInCelsius",
					in: {
						$add: [ 
							{ $multiply: [ "$$tempInCelsius", 9/5 ] },
							32
						]
					}
				}
			}
		}
	}
])

# $max ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.sales.aggregate([
	{
		$group: {
			_id: "$item",
			maxTotalAmount: { 
				$max: { 
					$multiply: [ "$price", "$quantity" ]
				}
			},
			maxQuantity: { $max: "$quantity" }
		}
	}
])

db.students.aggregate([
	 	{ 
		$project: { 
			quizMax: { $max: "$quizzes"}, 
			labMax: { $max: "$labs" }, 
			examMax: { $max: [ "$final", "$midterm" ] }
		}
	}
])

db.cakeSales.aggregate([
	{
		$setWindowFields: {
			partitionBy: "$state",
			sortBy: { orderDate: 1 },
			output: {
				maximumQuantityForState: {
					$max: "$quantity",
					window: {
						documents: [ "unbounded", "current" ]
					}
				}
			}
		}
	}
])

# $maxN ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.aggregate([
	{
		$documents: [
			{ playerId: "PlayerA", gameId: "G1", score: 1 },
			{ playerId: "PlayerB", gameId: "G1", score: 2 },
			{ playerId: "PlayerC", gameId: "G1", score: 3 },
			{ playerId: "PlayerD", gameId: "G1" },
			{ playerId: "PlayerE", gameId: "G1", score: null }
		]
	},
	{
		$group: {
			_id: "$gameId",
			maximumThreeScores: {
				$maxN: {
					input: "$score",
					n: 4
				}
			}
		}
	}
])

db.gamescores.aggregate([
	{
		$match : { gameId : "G1" }
	},
	{
		$group: {
			_id: "$gameId",
			maxThreeScores: {
				$maxN: {
					input: [ "$score", "$playerId" ],
					n: 3
				}
			}
		}
	}
])

db.gamescores.aggregate([
	{
		$group: {
			_id: "$gameId",
			maxThreeScores: {
				$maxN: {
					input: [ "$score", "$playerId" ],
					n: 3
				}
			}
		}
	}
])

db.gamescores.aggregate([
	{
		$group: {
			_id: {"gameId": "$gameId"},
			gamescores: {
				$maxN: {
					input: [ "$score", "$playerId" ],
					n: { 
						$cond: { 
							if: { $eq: ["$gameId","G2"] }, 
							then: 1, 
							else: 3
						}
					}
				}
			}
		}
	}
])

# $maxN ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.scores.aggregate([
	{ 
		$addFields: { 
			maxScores: { 
				$maxN: { 
					n: 2, 
					input: "$score" 
				}
			}
		}
	}
])

# $mergeObjects ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.orders.aggregate([
	{
		$lookup: {
			from: "items",
			localField: "item",    // field in the orders collection
			foreignField: "item",  // field in the items collection
			as: "fromItems"
		}
	},
	{
		$replaceRoot: { 
			newRoot: { 
				$mergeObjects: [ 
					{ $arrayElemAt: [ "$fromItems", 0 ] },
					"$$ROOT" 
				]
			}
		}
	},
	{ 
		$project: { fromItems: 0 }
	}
])

db.sales3.aggregate([
  { 
		$group: { 
			_id: "$item", 
			mergedSales: { $mergeObjects: "$quantity" }
		}
	}
])

# $meta ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.articles.aggregate([
	{ 
		$match: { 
			$text: { $search: "cake" }
		}
	}
])

db.articles.aggregate([
	{ 
		$match: { 
			$text: { $search: "cake" }
		},
		$group: { 
			_id: { $meta: "textScore" }, 
			count: { $sum: 1 }
		}
	}
])

db.orders1.createIndex({ type: 1, item: 1 })
db.orders1.aggregate([
	{ 
		$match: { type: "apparel" }
	},
	{ 
		$addFields: { idxKey: { $meta: "indexKey" } }
	}
])

db.orders1.aggregate([
	{ 
		$match: { 
			price: { $gte: NumberDecimal("10") }
		}
	},
	{ 
		$addFields: { 
			idxKey: { $meta: "indexKey" }
		} 
	}
])

# $min ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.sales1.aggregate([
	{
		$group: {
			_id: "$item",
			minQuantity: { $min: "$quantity" }
		}
	}
])

db.students.aggregate([
	{ 
		$project: { 
			quizMin: { $min: "$quizzes"}, 
			labMin: { $min: "$labs" }, 
			examMin: { $min: [ "$final", "$midterm" ] } 
		}
	}
])

db.cakeSales.aggregate([
	{
		$setWindowFields: {
			partitionBy: "$state",
			sortBy: { orderDate: 1 },
			output: {
				minimumQuantityForState: {
					$min: "$quantity",
					window: {
						documents: [ "unbounded", "current" ]
					}
				}
			}
		}
	}
])

# $minN ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
db.aggregate([
	{
		$documents: [
			{ playerId: "PlayerA", gameId: "G1", score: 1 },
			{ playerId: "PlayerB", gameId: "G1", score: 2 },
			{ playerId: "PlayerC", gameId: "G1", score: 3 },
			{ playerId: "PlayerD", gameId: "G1" },
			{ playerId: "PlayerE", gameId: "G1", score: null }
		]
	},
	{
		$group: {
			_id: "$gameId",
			minimumThreeScores: {
				$minN: {
					input: "$score",
					n: 4
				}
			}
		}
	}
])

db.gamescores.aggregate([
	{
		$match : { gameId : "G1" }
	},
	{
		$group: {
			_id: "$gameId",
			minScores: {
				$minN: {
					input: ["$score","$playerId"],
					n: 3
				}
			}
		}
	}
])

db.gamescores.aggregate([
	{
		$group: {
			_id: "$gameId",
			minScores: {
				$minN: {
					input: ["$score","$playerId"],
					n: 3
				}
			}
		}
	}
])

db.gamescores.aggregate([
	{
		$group: {
			_id: {"gameId": "$gameId"},
			gamescores: {
				$minN: {
					input: ["$score","$playerId"],
					n: { 
						$cond: { 
							if: { $eq: ["$gameId","G2"] }, 
							then: 1, 
							else: 3 
						}
					}
				}
			}
		}
	}
])


# $minN (array operator) ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
# $millisecond ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
# $minute ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
# $mod ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
# $month ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
# $multiply ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
# $ne
# $not
# $objectToArray
# $or
# $pow
# $push
# $radiansToDegrees
# $rand
# $range
# $rank
# $reduce
# $regexFind
# $regexFindAll
# $regexMatch
# $replaceOne
# $replaceAll
# $reverseArray
# $round
# $rtrim
# $sampleRate
# $second
# $setDifference
# $setEquals
# $setField
# $setIntersection
# $setIsSubset
# $setUnion
# $shift
# $size
# $sin
# $sinh
# $slice
# $sortArray
# $split
# $sqrt
# $stdDevPop
# $stdDevSamp
# $strcasecmp
# $strLenBytes
# $strLenCP
# $substr
# $substrBytes
# $substrCP
# $subtract
# $sum
# $switch
db.grades.aggregate([
	{
		$project: {
			"name" : 1,
			"avg": { $avg: "$scores"},
			"summary" : {
				$switch: {
					branches: [
						{
							case: { 
								$gte : [ { $avg : "$scores" }, 90 ]
							},
							then: "Doing great!"
						},
						{
							case: { 
								$and : [ 
									{ $gte : [ { $avg : "$scores" }, 80 ] },
									{ $lt : [ { $avg : "$scores" }, 90 ] }
								]
							},
							then: "Doing pretty well."
						},
						{
							case: { 
								$lt : [ { $avg : "$scores" }, 80 ]
							},
							then: "Needs improvement."
						}
					],
					default: "No scores found."
				}
			}
		}
	}
])

# $tan
# $tanh
# $toBool
# $toDate
# $toDecimal
# $toDouble
# $toInt
# $toLong
# $toObjectId
# $top
# $topN
# $toString
# $toLower
# $toUpper
# $trim
# $trunc
# $tsIncrement
# $tsSecond
# $type
# $unsetField
# $week
# $year
# $zip
# 
# 
